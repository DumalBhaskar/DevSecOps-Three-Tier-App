pipeline {
    agent any
    
    environment {
     
     scannerHome = tool 'sonar-scanner'
            
    }

    stages {

        stage('Cleaning Workspace') {
            steps {
                
                cleanWs()
            }
        }


        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        
        
        stage('Static Code Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('sonar-server') {
                              sh '''
                              
                                     ${scannerHome}/bin/sonar-scanner \
                                     -Dsonar.projectName=pythonapp \
                                     -Dsonar.sources=api/ \
                                     -Dsonar.projectKey=pythonapp
                                     
                                '''
                            }
                    }
                }

                stage('Owasp Dependency Check') {
                     steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            timeout(time: 60, unit: 'MINUTES') {
                                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dp'
                                dependencyCheckPublisher pattern:'dependency-check-report.xml'
                                
                            }
                        }
                    }
                }         
        
            }
        }

        stage("SonarQube Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
    }
}
